{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"RobaseService RobaseService is a RESTful API wrapper for Firebase Realtime Database - written in untyped Luau - for Roblox Developers seeking an external database service with a simple to use Luau wrapper. As mentioned, RobaseService seeks to be simple to use, but this is one of two core aims of this project. The second aim is to be an easy replacement to DataStoreService . You can find useful code to help with replacing old DataStore code and transferring data here . Recent Changes RobaseService v2.1.0-beta has been released. This release adds querying support for most documented Firebase URL Queries . Added support for the following query parameters: orderBy , shallow , limitToFirst , limitToLast , startAt , endAt , and equalTo . Documentation has been added for querying your database, see here for the API Reference. Gave the API Reference page a makeover and changed the look of the \"call-outs\" (aka \"caution\", \"tip\", etc.) to fit better with the website theme. Github Release page now includes a .rbxm file for you to drop into your studio session. Documentation for this will be added soon. Updated the Roblox Model to current version.. You no longer have to wrap your Robase method calls with a pcall this is done behind the scenes (see: HttpWrapper.lua on Github). Added proper error handling for ::GetAsync and ::SetAsync , this can be overridden if you know of Promise s and have experience with them you could use the ::Get and ::Set methods. Donation page and links have been set up, see Donating for more.","title":"Home"},{"location":"#robaseservice","text":"RobaseService is a RESTful API wrapper for Firebase Realtime Database - written in untyped Luau - for Roblox Developers seeking an external database service with a simple to use Luau wrapper. As mentioned, RobaseService seeks to be simple to use, but this is one of two core aims of this project. The second aim is to be an easy replacement to DataStoreService . You can find useful code to help with replacing old DataStore code and transferring data here .","title":"RobaseService"},{"location":"#recent-changes","text":"RobaseService v2.1.0-beta has been released. This release adds querying support for most documented Firebase URL Queries . Added support for the following query parameters: orderBy , shallow , limitToFirst , limitToLast , startAt , endAt , and equalTo . Documentation has been added for querying your database, see here for the API Reference. Gave the API Reference page a makeover and changed the look of the \"call-outs\" (aka \"caution\", \"tip\", etc.) to fit better with the website theme. Github Release page now includes a .rbxm file for you to drop into your studio session. Documentation for this will be added soon. Updated the Roblox Model to current version.. You no longer have to wrap your Robase method calls with a pcall this is done behind the scenes (see: HttpWrapper.lua on Github). Added proper error handling for ::GetAsync and ::SetAsync , this can be overridden if you know of Promise s and have experience with them you could use the ::Get and ::Set methods. Donation page and links have been set up, see Donating for more.","title":"Recent Changes"},{"location":"donated/","text":"Thank you for donating! Your donation is kindly appreciated and will be used to help develop future software and continue support for current projects (mainly in the form of coffee).","title":"Thank you for donating!"},{"location":"donated/#thank-you-for-donating","text":"Your donation is kindly appreciated and will be used to help develop future software and continue support for current projects (mainly in the form of coffee).","title":"Thank you for donating!"},{"location":"donating/","text":"Donating RobaseService is open-source and free-to-use software and was made for the community. If you wish to support me or the development of my projects, please consider donating to my PayPal. Donations will be used to help develop future projects and maintain current ones and any amount donated is greatly appreciated. You can use my QR Code below to donate, or my PayPal Me link.","title":"Donating"},{"location":"donating/#donating","text":"RobaseService is open-source and free-to-use software and was made for the community. If you wish to support me or the development of my projects, please consider donating to my PayPal. Donations will be used to help develop future projects and maintain current ones and any amount donated is greatly appreciated. You can use my QR Code below to donate, or my PayPal Me link.","title":"Donating"},{"location":"introduction/","text":"Introduction Robase has been in development since June 2020 and has been released since August 2020. Development first began when the need to store larger and larger data grew and it became apparent that DataStores were not going to be the answer; ever. Extending the wrapper If you are planning on writing a manager similar to ProfileService using RobaseService, knowledge of Promises will likely be needed. What's the purpose? RobaseService aims to provide a reliable and safe method of saving and loading data, no matter how big or small. But what does it offer that DataStoreService doesn't? You are no longer limited to 4MB of data per key, your database can hold 1GB of storage and you have complete control over how everything is stored. You can access any key within the real-time database, simply use \"/\" to separate the keys. With DataStores you only have access to one point, making querying difficult and ensuring all data exists a slog with sanity checks. Robase is open-sourced, this means that its source code is available to everyone and can be looked at and researched easily - especially with the source documentation ! This will make extending and wrapping RobaseService simpler and creating an extension similar to DataStore2 by Kampfkarren or a manager like ProfileService by loleris. The Async methods are guaranteed to be race condition free, Robase uses Promises by evaera to ensure race safety. Every async function will yield until a value is retrieved. As of Robase 2.0.1-beta, there are now promise-returning methods that give developers full freedom over how their requests are handled and the methods will pass back the promise to be operated on. These methods are documented here . Can be updated dynamically whenever and however you please. To update a DataStore you have to go into a live game or studio and use the Command Bar to force a key to change, sometimes this just isn't practical. Doing this with Firebase however is simple to do and can be done from your browser, it's even accessible on your mobile! Just go to the Firebase Console and update it from the database view. Storage Freedom Before using Robase something you may want to ask yourself is: Do I need this? In most cases, DataStore2 or ProfileService will serve you well, though you won't be saving anything big or complex. If you are looking to store large, complex data, then Robase is something you will want in your arsenal. Firebase's Spark plan provides you with 1GB storage in total per database/project and 10GB of downloaded data per month. The Blaze plan is priced at how much you use, billed each month; each GB of storage costs $5 per month and each GB downloaded costs $1 per month. With the Blaze plan, a database using 1GB of storage and 100GB downloaded per month will be estimated to pay $105 per month. In addition to this, you get other bonuses. The differences between the Spark and Blaze plan is documented here This example profile shows just how complex and large data can be even when it has been vaguely optimised for storage. This profile will take up 3.6KB of data, that's not so much, right? Now imagine you have 100,000 unique players playing your game, that's now ~352MB, over a third of the capacity for the free plan. That's a lot of data! But this is just player data, what about things that happen in a server? Think about: an experience-wide event, like \"Double XP\" and how you would handle it; or even the optimised metadata for every minigame played; or an FFlags deployment system. There are a lot of things you can do in the backend of your database and it can all be controlled remotely. This example server data gives an example look at how a Firebase structure could be set up as a Lua table. This structure is approximately 2KB in storage. ServerData.PlayedMinigames.Games is approximately 1.5KB in size, each minigame's data equating to 105.5B. What if we asked how much this could grow? Imagine we have a small experience, with about 20,000 visits per day. Now let us say that on average every visit garners 1.8 minigame plays, we can scale this up to how much the database will grow each day. For 20,000 visits we would have 36,000 minigames played - that's roughly 3.62MB! Just how scalable and manageable is this? Well first we have to allow some assumptions: We reserve 500MB in data for player data, the server can use the rest of it. Growth is static and the number of visits/plays per day remains the same (20,000). Minigames Played to Experience Visits ratio is static at 1.8. local MaxServerData = 1 * 1024 * 1024 * 1024 -- 1GB in Bytes local VisitsPerDay = 20 * 1000 -- 20,000 Visits per day local MinigamesVisitsRatio = 1.8 -- Every visit receives on average 1.8 minigame plays local MinigamesPerDay = VisitsPerDay * MinigamesVisitsRatio -- do mult local MinigamesStorageCostPerDay = 105.5 * MinigamesPerDay -- in Bytes/day local MaxUsage = MaxServerData / 2 local DaysUntilMaxUsage = MaxUsage / MinigamesStorageCostPerDay print ( DaysUntilMaxUsage ) -->> 141.35... Info This is just one example of what one can do with large data. The possibilities are down to your imagination. Accessing deeply-nested keys Being able to access a deeply-nested key can be helpful for a few reasons: It can save on the HttpService budget and lowers the amount of downloaded data Saves unnecessary lines of code rooting through tables Gruesome sanity checks are a thing of the past! Making a request to a key using :GetAsync() will always return profound information: (success: boolean, value: any) Success is either true or an error is thrown. Value will be the response body with a successful request or the whole response dictionary if it fails. Extending Robase and managing your data Writing a custom manager similar to DataStore2 or ProfileService may seem daunting at first, but as long as you are safe and secure when handling your data, it does not need to be as developed and can simply be a primitive version of them, but take note: Key Information Cache is a necessity; Session-Locking is recommended; You should write parsers to form keys to access data when needed; Downloading the whole database for each server is cumbersome and can lead to eating through your data usage, only access data that's needed, de-serialise your data appropriately; Check out the source code for insight into how the code works! Why Promises? Why you should use promises The way Roblox models asynchronous operations by default is by yielding (stopping) the thread and then resuming it when the future value is available. This model is not ideal because: Functions you call can yield without warning, or only yield sometimes, leading to unpredictable and surprising results. Accidentally yielding the thread is the source of a large class of bugs and race conditions that Roblox developers run into. It is difficult to deal with running multiple asynchronous operations concurrently and then retrieve all of their values at the end without extraneous machinery. When an asynchronous operation fails or an error is encountered, Lua functions usually either raise an error or return a success value followed by the actual value. Both of these methods lead to repeating the same tired patterns many times over for checking if the operation was successful. Yielding lacks easy access to introspection and the ability to cancel an operation if the value is no longer needed. Dynamic Updates Every key in your Firebase Realtime Database can be modified from the Firebase Console. This allows for some unique behaviour that you couldn't otherwise do without loading up the client and entering the game yourself to modify DataStores through the command bar - which is slow and can be complicated. With a Realtime Database, you can have functions in-game that check keys periodically or do something at specific times, or enable/disable beta features/content for your players depending on the value received. As noted in our example, Double XP is a perfect example of a timed event that can run via your database. You can set a key, say \"Activate\" to true, and then watch as your game-code updates and displays that the event is in progress and updates accordingly. You can create a Fast-Flag deployment system for your game. This is the deployment system Roblox uses to enable and disable features. This is possible with DataStoreService but it isn't as easy or convenient.","title":"About"},{"location":"introduction/#introduction","text":"Robase has been in development since June 2020 and has been released since August 2020. Development first began when the need to store larger and larger data grew and it became apparent that DataStores were not going to be the answer; ever. Extending the wrapper If you are planning on writing a manager similar to ProfileService using RobaseService, knowledge of Promises will likely be needed.","title":"Introduction"},{"location":"introduction/#whats-the-purpose","text":"RobaseService aims to provide a reliable and safe method of saving and loading data, no matter how big or small. But what does it offer that DataStoreService doesn't? You are no longer limited to 4MB of data per key, your database can hold 1GB of storage and you have complete control over how everything is stored. You can access any key within the real-time database, simply use \"/\" to separate the keys. With DataStores you only have access to one point, making querying difficult and ensuring all data exists a slog with sanity checks. Robase is open-sourced, this means that its source code is available to everyone and can be looked at and researched easily - especially with the source documentation ! This will make extending and wrapping RobaseService simpler and creating an extension similar to DataStore2 by Kampfkarren or a manager like ProfileService by loleris. The Async methods are guaranteed to be race condition free, Robase uses Promises by evaera to ensure race safety. Every async function will yield until a value is retrieved. As of Robase 2.0.1-beta, there are now promise-returning methods that give developers full freedom over how their requests are handled and the methods will pass back the promise to be operated on. These methods are documented here . Can be updated dynamically whenever and however you please. To update a DataStore you have to go into a live game or studio and use the Command Bar to force a key to change, sometimes this just isn't practical. Doing this with Firebase however is simple to do and can be done from your browser, it's even accessible on your mobile! Just go to the Firebase Console and update it from the database view.","title":"What's the purpose?"},{"location":"introduction/#storage-freedom","text":"Before using Robase something you may want to ask yourself is: Do I need this? In most cases, DataStore2 or ProfileService will serve you well, though you won't be saving anything big or complex. If you are looking to store large, complex data, then Robase is something you will want in your arsenal. Firebase's Spark plan provides you with 1GB storage in total per database/project and 10GB of downloaded data per month. The Blaze plan is priced at how much you use, billed each month; each GB of storage costs $5 per month and each GB downloaded costs $1 per month. With the Blaze plan, a database using 1GB of storage and 100GB downloaded per month will be estimated to pay $105 per month. In addition to this, you get other bonuses. The differences between the Spark and Blaze plan is documented here This example profile shows just how complex and large data can be even when it has been vaguely optimised for storage. This profile will take up 3.6KB of data, that's not so much, right? Now imagine you have 100,000 unique players playing your game, that's now ~352MB, over a third of the capacity for the free plan. That's a lot of data! But this is just player data, what about things that happen in a server? Think about: an experience-wide event, like \"Double XP\" and how you would handle it; or even the optimised metadata for every minigame played; or an FFlags deployment system. There are a lot of things you can do in the backend of your database and it can all be controlled remotely. This example server data gives an example look at how a Firebase structure could be set up as a Lua table. This structure is approximately 2KB in storage. ServerData.PlayedMinigames.Games is approximately 1.5KB in size, each minigame's data equating to 105.5B. What if we asked how much this could grow? Imagine we have a small experience, with about 20,000 visits per day. Now let us say that on average every visit garners 1.8 minigame plays, we can scale this up to how much the database will grow each day. For 20,000 visits we would have 36,000 minigames played - that's roughly 3.62MB! Just how scalable and manageable is this? Well first we have to allow some assumptions: We reserve 500MB in data for player data, the server can use the rest of it. Growth is static and the number of visits/plays per day remains the same (20,000). Minigames Played to Experience Visits ratio is static at 1.8. local MaxServerData = 1 * 1024 * 1024 * 1024 -- 1GB in Bytes local VisitsPerDay = 20 * 1000 -- 20,000 Visits per day local MinigamesVisitsRatio = 1.8 -- Every visit receives on average 1.8 minigame plays local MinigamesPerDay = VisitsPerDay * MinigamesVisitsRatio -- do mult local MinigamesStorageCostPerDay = 105.5 * MinigamesPerDay -- in Bytes/day local MaxUsage = MaxServerData / 2 local DaysUntilMaxUsage = MaxUsage / MinigamesStorageCostPerDay print ( DaysUntilMaxUsage ) -->> 141.35... Info This is just one example of what one can do with large data. The possibilities are down to your imagination.","title":"Storage Freedom"},{"location":"introduction/#accessing-deeply-nested-keys","text":"Being able to access a deeply-nested key can be helpful for a few reasons: It can save on the HttpService budget and lowers the amount of downloaded data Saves unnecessary lines of code rooting through tables Gruesome sanity checks are a thing of the past! Making a request to a key using :GetAsync() will always return profound information: (success: boolean, value: any) Success is either true or an error is thrown. Value will be the response body with a successful request or the whole response dictionary if it fails.","title":"Accessing deeply-nested keys"},{"location":"introduction/#extending-robase-and-managing-your-data","text":"Writing a custom manager similar to DataStore2 or ProfileService may seem daunting at first, but as long as you are safe and secure when handling your data, it does not need to be as developed and can simply be a primitive version of them, but take note: Key Information Cache is a necessity; Session-Locking is recommended; You should write parsers to form keys to access data when needed; Downloading the whole database for each server is cumbersome and can lead to eating through your data usage, only access data that's needed, de-serialise your data appropriately; Check out the source code for insight into how the code works!","title":"Extending Robase and managing your data"},{"location":"introduction/#why-promises","text":"Why you should use promises The way Roblox models asynchronous operations by default is by yielding (stopping) the thread and then resuming it when the future value is available. This model is not ideal because: Functions you call can yield without warning, or only yield sometimes, leading to unpredictable and surprising results. Accidentally yielding the thread is the source of a large class of bugs and race conditions that Roblox developers run into. It is difficult to deal with running multiple asynchronous operations concurrently and then retrieve all of their values at the end without extraneous machinery. When an asynchronous operation fails or an error is encountered, Lua functions usually either raise an error or return a success value followed by the actual value. Both of these methods lead to repeating the same tired patterns many times over for checking if the operation was successful. Yielding lacks easy access to introspection and the ability to cancel an operation if the value is no longer needed.","title":"Why Promises?"},{"location":"introduction/#dynamic-updates","text":"Every key in your Firebase Realtime Database can be modified from the Firebase Console. This allows for some unique behaviour that you couldn't otherwise do without loading up the client and entering the game yourself to modify DataStores through the command bar - which is slow and can be complicated. With a Realtime Database, you can have functions in-game that check keys periodically or do something at specific times, or enable/disable beta features/content for your players depending on the value received. As noted in our example, Double XP is a perfect example of a timed event that can run via your database. You can set a key, say \"Activate\" to true, and then watch as your game-code updates and displays that the event is in progress and updates accordingly. You can create a Fast-Flag deployment system for your game. This is the deployment system Roblox uses to enable and disable features. This is possible with DataStoreService but it isn't as easy or convenient.","title":"Dynamic Updates"},{"location":"issue-reporting/","text":"Issue Reporting Whether you have an issue with either the documentation pages or RobaseService itself, you can: File an issue on the GitHub. or join the help server on Discord (13 years or older).","title":"Issue Reporting"},{"location":"issue-reporting/#issue-reporting","text":"Whether you have an issue with either the documentation pages or RobaseService itself, you can: File an issue on the GitHub. or join the help server on Discord (13 years or older).","title":"Issue Reporting"},{"location":"API/RobaseService/","text":"RobaseService Danger RobaseService cannot be used without first instantiating it with .new and providing a Firebase Database Url and a Secrets Authentication Token. new Used to instantiate a new RobaseService with the provided Url and Auth Token. RobaseService . new ( baseUrl : string , token : string ) --> RobaseService This method will create a new RobaseService for the provided database. baseUrl : string This is the URL of your database, it can be found at the top of the database view in the Firebase Console. token : string This is your Database Secrets Authentication Token. Currently, RobaseService only accepts this method of authentication. Danger You must not store your Authentication Token and Database URL in your source code as plain-text. You should consider saving them (and any other secret information) into a DataStore and acquiring it from there. GetRobase Used to retrieve a Robase object with a path supplied from scope and name. RobaseService : GetRobase ([ name : string , [ scope : string ]]) --> Robase This method will create a new Robase object at the path determined by scope and name. name?: string Optional (but recommended) parameter for the name of the key that the Robase points toward. scope?: string Optional parameter for the scope (directory path) you wish to start searching in for \"name\". This should be a path going through your database with keys separated by \"/\" like a file system!","title":"RobaseService"},{"location":"API/RobaseService/#robaseservice","text":"Danger RobaseService cannot be used without first instantiating it with .new and providing a Firebase Database Url and a Secrets Authentication Token.","title":"RobaseService"},{"location":"API/RobaseService/#new","text":"Used to instantiate a new RobaseService with the provided Url and Auth Token. RobaseService . new ( baseUrl : string , token : string ) --> RobaseService This method will create a new RobaseService for the provided database. baseUrl : string This is the URL of your database, it can be found at the top of the database view in the Firebase Console. token : string This is your Database Secrets Authentication Token. Currently, RobaseService only accepts this method of authentication. Danger You must not store your Authentication Token and Database URL in your source code as plain-text. You should consider saving them (and any other secret information) into a DataStore and acquiring it from there.","title":"new"},{"location":"API/RobaseService/#getrobase","text":"Used to retrieve a Robase object with a path supplied from scope and name. RobaseService : GetRobase ([ name : string , [ scope : string ]]) --> Robase This method will create a new Robase object at the path determined by scope and name. name?: string Optional (but recommended) parameter for the name of the key that the Robase points toward. scope?: string Optional parameter for the scope (directory path) you wish to start searching in for \"name\". This should be a path going through your database with keys separated by \"/\" like a file system!","title":"GetRobase"},{"location":"API/reference/","text":"Reference This page exposes the methods of RobaseService and further pages discuss the semantics of how everything works. RobaseService Methods that make up RobaseService RobaseService.new RobaseService::GetRobase Robase Methods (categorised by purpose) that make up the core of RobaseService - Robases. Promiselike Methods Methods that return promises to be consumed by the provider. Allowing for user-defined error handling among other use cases. Robase::Get Robase::Set Asynchronous Methods Methods that consume a promise and return information. These use the promise-like methods above and consumes them automatically, handling errors appropriately. Robase::GetAsync Robase::SetAsync Robase::IncrementAsync Robase::DeleteAsync Robase::UpdateAsync Robase::BatchUpdateAsync Query Methods Methods that filter the data retrieved by a request. These utilise the query parameters of the Firebase REST API. Robase::setShallow Robase::orderBy Robase::startAt Robase::endAt Robase::equalTo Robase::limitToFirst Robase::limitToLast","title":"Reference"},{"location":"API/reference/#reference","text":"This page exposes the methods of RobaseService and further pages discuss the semantics of how everything works.","title":"Reference"},{"location":"API/reference/#robaseservice","text":"Methods that make up RobaseService RobaseService.new RobaseService::GetRobase","title":"RobaseService"},{"location":"API/reference/#robase","text":"Methods (categorised by purpose) that make up the core of RobaseService - Robases.","title":"Robase"},{"location":"API/reference/#promiselike-methods","text":"Methods that return promises to be consumed by the provider. Allowing for user-defined error handling among other use cases. Robase::Get Robase::Set","title":"Promiselike Methods"},{"location":"API/reference/#asynchronous-methods","text":"Methods that consume a promise and return information. These use the promise-like methods above and consumes them automatically, handling errors appropriately. Robase::GetAsync Robase::SetAsync Robase::IncrementAsync Robase::DeleteAsync Robase::UpdateAsync Robase::BatchUpdateAsync","title":"Asynchronous Methods"},{"location":"API/reference/#query-methods","text":"Methods that filter the data retrieved by a request. These utilise the query parameters of the Firebase REST API. Robase::setShallow Robase::orderBy Robase::startAt Robase::endAt Robase::equalTo Robase::limitToFirst Robase::limitToLast","title":"Query Methods"},{"location":"API/Robase/AsyncMethods/","text":"Async methods returning information The asynchronous methods of Robase are here to immediately retrieve information and perform operations on your database. These are simple and have no side effects outside of the HTTP Requests they perform. These are useful if you don't wish to do anything on top of what Robase already does and just wish to use the core functions. Internally, Robase uses the Promise-returning methods and consumes them with an :await() call. GetAsync Retrieves the data stored at the given key within the Robase. Robase : GetAsync ( key : string ) --> Success: Boolean, Result: any Retrieves data from the database from the given key. key: string The name of the key you wish to retrieve data from. SetAsync Adds data into the Robase at the key specified using the given method. Robase : SetAsync ( key : string , data : any , [ method : string ]) --> Success: Boolean, Result: any Adds data into the Robase at the key specified using the given method if provided, or \"PUT\" otherwise. key: string The name of the key you wish to add data into (will create a new key if one does not exist). data: any The data you wish to put into the database. method?: string Optional parameter defining the HTTP Method to use, this will default to \"PUT\". IncrementAsync Increments the data stored at the given key by the supplied delta. This only works on key's which have an integer value and with an integer-only delta (ex. 1.5 will not work) Delta is an optional parameter and will default to 1 if not supplied. Robase : IncrementAsync ( key : string , [ delta : integer ]) --> Success: Boolean, Result: any This method will increment an integer-typed value belong to the given key by either 1 or delta key: string The key you wish to increment delta?: integer An optional parameter for how much you wish to increment by, will default to 1 This parameter must be an integer, it can not be a number (5.7 for example). Usage restrictions You can only use :IncrementAsync on keys with integer values! Delta must be an integer or nil! DeleteAsync Deletes the data at the specified key permanently. Robase : DeleteAsync ( key : string ) --> Success: Boolean, Result: any This method will delete a key entirely from the database and returns the previously stored value. key: string The key you wish to delete from the database Dangerous This method is incredibly dangerous. It can delete entire trees of data and cannot be rolled back. It will return the data previously stored at the key given. UpdateAsync Retrieves data from the Robase at the given key, or from the cache if provided and transforms it using the callback function and updates the key with a new value. Robase : UpdateAsync ( key , callback [, cache ]) This method will take a key and modify its data using the callback ('updater') function. Optionally, it can take in a cache table whose contents match that of the key you are updating. key: string This is the key you are trying to modify the data of, it must be a table. callback: function(oldData) This is the function used to update (or modify) the data within the key. cache?: {[string]=table,...} Optional parameter used to provide Robase with data that should be newer than what the database has stored. Though it is strongly suggested that you update your database before updating your cache, else you risk losing data if your game crashes before the server can update the database with the cache. BatchUpdateAsync Similar in functionality to :UpdateAsync except given a baseKey, it will modify keys with the provided updater (callback) functions. Robase : BatchUpdateAsync ( baseKey , callbacks [, cache ]) This method takes in a baseKey and a table of callback ('updater') functions whose key's are children of the 'baseKey'. Optionally, it can take in a cache table whose keys match the callbacks table and should be the point of which baseKey starts in your database. baseKey: string This is the parent key of the keys you are trying to update, see the usage guide for more information. callbacks: {[string]=function(oldData),...} A dictionary of string-keys and function-values, the keys of this table should be the same name as the keys you wish to modify within the 'baseKey' of your database. These functions take a single parameter oldData and should return a table of modified data. This parameter is retrieved internally either from cache [ key ] where key is a key from callbacks , or it will be equal to a : GetAsync ( key ) request if a cache is not provided. cache?: {[string]=table]} Optional parameter used to provide Robase with data that should be newer than what the database has stored. Though it is strongly suggested that you update your database before updating your cache, else you risk losing data if your game crashes before the server can update the database with the cache.","title":"Async Methods"},{"location":"API/Robase/AsyncMethods/#async-methods-returning-information","text":"The asynchronous methods of Robase are here to immediately retrieve information and perform operations on your database. These are simple and have no side effects outside of the HTTP Requests they perform. These are useful if you don't wish to do anything on top of what Robase already does and just wish to use the core functions. Internally, Robase uses the Promise-returning methods and consumes them with an :await() call.","title":"Async methods returning information"},{"location":"API/Robase/AsyncMethods/#getasync","text":"Retrieves the data stored at the given key within the Robase. Robase : GetAsync ( key : string ) --> Success: Boolean, Result: any Retrieves data from the database from the given key. key: string The name of the key you wish to retrieve data from.","title":"GetAsync"},{"location":"API/Robase/AsyncMethods/#setasync","text":"Adds data into the Robase at the key specified using the given method. Robase : SetAsync ( key : string , data : any , [ method : string ]) --> Success: Boolean, Result: any Adds data into the Robase at the key specified using the given method if provided, or \"PUT\" otherwise. key: string The name of the key you wish to add data into (will create a new key if one does not exist). data: any The data you wish to put into the database. method?: string Optional parameter defining the HTTP Method to use, this will default to \"PUT\".","title":"SetAsync"},{"location":"API/Robase/AsyncMethods/#incrementasync","text":"Increments the data stored at the given key by the supplied delta. This only works on key's which have an integer value and with an integer-only delta (ex. 1.5 will not work) Delta is an optional parameter and will default to 1 if not supplied. Robase : IncrementAsync ( key : string , [ delta : integer ]) --> Success: Boolean, Result: any This method will increment an integer-typed value belong to the given key by either 1 or delta key: string The key you wish to increment delta?: integer An optional parameter for how much you wish to increment by, will default to 1 This parameter must be an integer, it can not be a number (5.7 for example). Usage restrictions You can only use :IncrementAsync on keys with integer values! Delta must be an integer or nil!","title":"IncrementAsync"},{"location":"API/Robase/AsyncMethods/#deleteasync","text":"Deletes the data at the specified key permanently. Robase : DeleteAsync ( key : string ) --> Success: Boolean, Result: any This method will delete a key entirely from the database and returns the previously stored value. key: string The key you wish to delete from the database Dangerous This method is incredibly dangerous. It can delete entire trees of data and cannot be rolled back. It will return the data previously stored at the key given.","title":"DeleteAsync"},{"location":"API/Robase/AsyncMethods/#updateasync","text":"Retrieves data from the Robase at the given key, or from the cache if provided and transforms it using the callback function and updates the key with a new value. Robase : UpdateAsync ( key , callback [, cache ]) This method will take a key and modify its data using the callback ('updater') function. Optionally, it can take in a cache table whose contents match that of the key you are updating. key: string This is the key you are trying to modify the data of, it must be a table. callback: function(oldData) This is the function used to update (or modify) the data within the key. cache?: {[string]=table,...} Optional parameter used to provide Robase with data that should be newer than what the database has stored. Though it is strongly suggested that you update your database before updating your cache, else you risk losing data if your game crashes before the server can update the database with the cache.","title":"UpdateAsync"},{"location":"API/Robase/AsyncMethods/#batchupdateasync","text":"Similar in functionality to :UpdateAsync except given a baseKey, it will modify keys with the provided updater (callback) functions. Robase : BatchUpdateAsync ( baseKey , callbacks [, cache ]) This method takes in a baseKey and a table of callback ('updater') functions whose key's are children of the 'baseKey'. Optionally, it can take in a cache table whose keys match the callbacks table and should be the point of which baseKey starts in your database. baseKey: string This is the parent key of the keys you are trying to update, see the usage guide for more information. callbacks: {[string]=function(oldData),...} A dictionary of string-keys and function-values, the keys of this table should be the same name as the keys you wish to modify within the 'baseKey' of your database. These functions take a single parameter oldData and should return a table of modified data. This parameter is retrieved internally either from cache [ key ] where key is a key from callbacks , or it will be equal to a : GetAsync ( key ) request if a cache is not provided. cache?: {[string]=table]} Optional parameter used to provide Robase with data that should be newer than what the database has stored. Though it is strongly suggested that you update your database before updating your cache, else you risk losing data if your game crashes before the server can update the database with the cache.","title":"BatchUpdateAsync"},{"location":"API/Robase/Promiselikes/","text":"Promise-like methods Promise returning methods allow you to abstract over the original async methods of Robase so that you can implement custom functionality. This requires knowledge of Promises to implement and even further knowledge on them to perform meaningful tasks that Robase does not. These are retrieved synchronously but consumed asynchronously. Get Returns a promise associated with retrieving a value from the database. Robase : Get ( key : string ) --> Promise Returns a promise synchronously for an asynchronous get operation. key: string The name of the key you wish to retrieve data from. Set Returns a promise associated with adding a value into the database. Robase : Set ( key : string , data : any [, method : string ]) --> Promise Returns a promise synchronously for an asynchronous set operation. key: string The name of the key you wish to add data into (will create a new key if one does not exist). data: any The data you wish to add to the database method?: string Optional parameter defining the HTTP Method to use, this will default to \"PUT\".","title":"Promise-like Methods"},{"location":"API/Robase/Promiselikes/#promise-like-methods","text":"Promise returning methods allow you to abstract over the original async methods of Robase so that you can implement custom functionality. This requires knowledge of Promises to implement and even further knowledge on them to perform meaningful tasks that Robase does not. These are retrieved synchronously but consumed asynchronously.","title":"Promise-like methods"},{"location":"API/Robase/Promiselikes/#get","text":"Returns a promise associated with retrieving a value from the database. Robase : Get ( key : string ) --> Promise Returns a promise synchronously for an asynchronous get operation. key: string The name of the key you wish to retrieve data from.","title":"Get"},{"location":"API/Robase/Promiselikes/#set","text":"Returns a promise associated with adding a value into the database. Robase : Set ( key : string , data : any [, method : string ]) --> Promise Returns a promise synchronously for an asynchronous set operation. key: string The name of the key you wish to add data into (will create a new key if one does not exist). data: any The data you wish to add to the database method?: string Optional parameter defining the HTTP Method to use, this will default to \"PUT\".","title":"Set"},{"location":"API/Robase/QueryMethods/","text":"Query Methods All query methods are an implementation of the Firebase REST API's query parameters, for more information please visit the documentation on retrieving data and how query parameters are used. This section of the documentation will not cover the specifics of each case and will instead provide a general overview of the Robase API. Shallow Data Shallow data is an important query useful for large datasets where you don't need to know all the information at a given place or its child data, and only need to know it exists. Setting this to true will limit the depth of the data returned. If the data at the specified location is a JSON primitive data type, it will return the data exclusively. Otherwise, the values for each key will be truncated to true . setShallow Usage Limitation Shallow queries are independent queries and cannot be combined with other query methods for Ordering Data Robase : setShallow ( value : boolean ) --> Robase Returns a modified Robase object with its shallow query parameter set to the value given. This will truncate all values to true if the target location is a JSON object, or the literal value if the target location is a JSON primitive. value: boolean The value of the query parameter Ordering Data Limitation Results returned by orderBy are unsorted because JSON interpreters do not enforce any ordering on the result. When combined with a startAt , endAt , limitToFirst , or limitToLast to retrieve a subset of the data, though these results will be unsorted. Thus, if necessary, sorting must be done manually. Requirement The orderBy query parameter requires string values to be escaped as literal strings in the URL, so your strings should escape \" quotes. For example: Robase : orderBy ( \" \\\" $key \\\" \" ) ---- Robase : orderBy ( '\"$key\"' ) ---- Robase : equalTo ( ( \" \\\" %s \\\" \" ): format ( \"$priority\" ) ) Ordering data is simple to do by constructing queries based on certain factors. Initially, you must define how you want your data to be ordered - by key, value, or priority - using the orderBy method, this will return a modified Robase object with an ordering query setup. This Robase is now ready to be used with filtering methods: startAt , endAt , equalTo , limitToFirst , and limitToLast . orderBy The orderBy method is used to tell Robase what method the filtering queries should be ordered with, the options are: orderBy=$key : will filter results based on their key. orderBy=$value : will filter results based on their value. orderBy=$priority : will filter results on their priority. Robase : orderBy ( value : any ) --> Robase Returns a new, modified Robase with its ordering query parameter set. value: any The ordering method or child key to be used when filtering data. This value must be convertible to the string data type. Furthermore, you can also order by a specific child key , which put simply: allows you to filter results based on a specific key. For example, a Level node in the database where player data is stored and each player has a level, like so: { \"Player1\" : { Level : 10 }, \"Player2\" : { Level : 2 } } Caution If you are ordering by child key, any node at the target location that does not contain that specific key will be returned as null and should be handled appropriately. Range Queries Useful Tip Range queries are useful when you need to paginate your data! Requirement The Range query parameters require string values to be escaped as literal strings in the URL, so your strings should escape \" quotes. For example: ```lua Robase:startAt(\"\\\"$key\\\"\") Robase:endAt('\"$value\"') Robase:equalTo( (\"\\\"%s\\\"\"):format(\"$priority\") ) startAt Robase : startAt ( value : string ) --> Robase Returns a modified Robase object with its startAt query parameter set to the value given. This will give all results that start at (inclusive), and not before, the given value. value: string The value of which the results gathered should start. Results that do not start at this point (for example, \"b\", will exclude any result that ends before this). endAt Robase : endAt ( value : string ) --> Robase Returns a modified Robase object with its endAt query parameter set to the value given. This will return all results that end before (inclusive) the given value. value: string The value of which the results gathered should end. Results that start after this point will not be returned (for example calling Robase:endAt(\"c\") will return all results that start and end up to the letter \"c\") Tip It is common to want to combine a startAt and endAt query to set the range of values that get returned, this is possible using Robase, you would simply chain the methods together. The example from the Firebase documentation would look like this: Robase : orderBy ( \"$key\" ): startAt ( \"b\" ): endAt ( \"b \\ uf8ff\" ) This example would return all results that start at 'b' and end before 'c'. The \\uf8ff character used in the above example is a very high code point in the Unicode range equalTo Robase : equalTo ( value : string ) --> Robase Returns a modified Robase object with its equalTo query parameter set to the value given. This will return results that are equal to the value given from the target location of the Robase. value: string The value of which all results returned will be equal to. Limit Queries Requirement The Limit query parameters are required to be integers (whole numbers). For example: Robase : limitToFirst ( 100 ) ---- Robase : limitToLast ( 10 ) Limit queries are used to limit the amount of data returned from a request. The query parameters limitToFirst and limitToLast are used to set a maximum number of children to be returned. If the number of results is less than the limit, all of those results will be returned, otherwise if there are more results than the limit, only the limit will be returned. limitToFirst Robase : limitToFirst ( limit : integer ) --> Robase Returns a modified Robase object with its limitToLast query parameter set to the value given. This will return the first {limit} children at the target location. limit: integer The number of results to be returned by the request. limitToLast Robase : limitToLast ( limit : integer ) --> Robase Returns a modified Robase object with its limitToLast query parameter set to the value given. This will return the last {limit} children at the target location. limit: integer The number of results to be returned by the request.","title":"Query Methods"},{"location":"API/Robase/QueryMethods/#query-methods","text":"All query methods are an implementation of the Firebase REST API's query parameters, for more information please visit the documentation on retrieving data and how query parameters are used. This section of the documentation will not cover the specifics of each case and will instead provide a general overview of the Robase API.","title":"Query Methods"},{"location":"API/Robase/QueryMethods/#shallow-data","text":"Shallow data is an important query useful for large datasets where you don't need to know all the information at a given place or its child data, and only need to know it exists. Setting this to true will limit the depth of the data returned. If the data at the specified location is a JSON primitive data type, it will return the data exclusively. Otherwise, the values for each key will be truncated to true .","title":"Shallow Data"},{"location":"API/Robase/QueryMethods/#setshallow","text":"Usage Limitation Shallow queries are independent queries and cannot be combined with other query methods for Ordering Data Robase : setShallow ( value : boolean ) --> Robase Returns a modified Robase object with its shallow query parameter set to the value given. This will truncate all values to true if the target location is a JSON object, or the literal value if the target location is a JSON primitive. value: boolean The value of the query parameter","title":"setShallow"},{"location":"API/Robase/QueryMethods/#ordering-data","text":"Limitation Results returned by orderBy are unsorted because JSON interpreters do not enforce any ordering on the result. When combined with a startAt , endAt , limitToFirst , or limitToLast to retrieve a subset of the data, though these results will be unsorted. Thus, if necessary, sorting must be done manually. Requirement The orderBy query parameter requires string values to be escaped as literal strings in the URL, so your strings should escape \" quotes. For example: Robase : orderBy ( \" \\\" $key \\\" \" ) ---- Robase : orderBy ( '\"$key\"' ) ---- Robase : equalTo ( ( \" \\\" %s \\\" \" ): format ( \"$priority\" ) ) Ordering data is simple to do by constructing queries based on certain factors. Initially, you must define how you want your data to be ordered - by key, value, or priority - using the orderBy method, this will return a modified Robase object with an ordering query setup. This Robase is now ready to be used with filtering methods: startAt , endAt , equalTo , limitToFirst , and limitToLast .","title":"Ordering Data"},{"location":"API/Robase/QueryMethods/#orderby","text":"The orderBy method is used to tell Robase what method the filtering queries should be ordered with, the options are: orderBy=$key : will filter results based on their key. orderBy=$value : will filter results based on their value. orderBy=$priority : will filter results on their priority. Robase : orderBy ( value : any ) --> Robase Returns a new, modified Robase with its ordering query parameter set. value: any The ordering method or child key to be used when filtering data. This value must be convertible to the string data type. Furthermore, you can also order by a specific child key , which put simply: allows you to filter results based on a specific key. For example, a Level node in the database where player data is stored and each player has a level, like so: { \"Player1\" : { Level : 10 }, \"Player2\" : { Level : 2 } } Caution If you are ordering by child key, any node at the target location that does not contain that specific key will be returned as null and should be handled appropriately.","title":"orderBy"},{"location":"API/Robase/QueryMethods/#range-queries","text":"Useful Tip Range queries are useful when you need to paginate your data! Requirement The Range query parameters require string values to be escaped as literal strings in the URL, so your strings should escape \" quotes. For example: ```lua Robase:startAt(\"\\\"$key\\\"\")","title":"Range Queries"},{"location":"API/Robase/QueryMethods/#robaseendatvalue","text":"Robase:equalTo( (\"\\\"%s\\\"\"):format(\"$priority\") )","title":"Robase:endAt('\"$value\"')"},{"location":"API/Robase/QueryMethods/#startat","text":"Robase : startAt ( value : string ) --> Robase Returns a modified Robase object with its startAt query parameter set to the value given. This will give all results that start at (inclusive), and not before, the given value. value: string The value of which the results gathered should start. Results that do not start at this point (for example, \"b\", will exclude any result that ends before this).","title":"startAt"},{"location":"API/Robase/QueryMethods/#endat","text":"Robase : endAt ( value : string ) --> Robase Returns a modified Robase object with its endAt query parameter set to the value given. This will return all results that end before (inclusive) the given value. value: string The value of which the results gathered should end. Results that start after this point will not be returned (for example calling Robase:endAt(\"c\") will return all results that start and end up to the letter \"c\") Tip It is common to want to combine a startAt and endAt query to set the range of values that get returned, this is possible using Robase, you would simply chain the methods together. The example from the Firebase documentation would look like this: Robase : orderBy ( \"$key\" ): startAt ( \"b\" ): endAt ( \"b \\ uf8ff\" ) This example would return all results that start at 'b' and end before 'c'. The \\uf8ff character used in the above example is a very high code point in the Unicode range","title":"endAt"},{"location":"API/Robase/QueryMethods/#equalto","text":"Robase : equalTo ( value : string ) --> Robase Returns a modified Robase object with its equalTo query parameter set to the value given. This will return results that are equal to the value given from the target location of the Robase. value: string The value of which all results returned will be equal to.","title":"equalTo"},{"location":"API/Robase/QueryMethods/#limit-queries","text":"Requirement The Limit query parameters are required to be integers (whole numbers). For example: Robase : limitToFirst ( 100 ) ---- Robase : limitToLast ( 10 ) Limit queries are used to limit the amount of data returned from a request. The query parameters limitToFirst and limitToLast are used to set a maximum number of children to be returned. If the number of results is less than the limit, all of those results will be returned, otherwise if there are more results than the limit, only the limit will be returned.","title":"Limit Queries"},{"location":"API/Robase/QueryMethods/#limittofirst","text":"Robase : limitToFirst ( limit : integer ) --> Robase Returns a modified Robase object with its limitToLast query parameter set to the value given. This will return the first {limit} children at the target location. limit: integer The number of results to be returned by the request.","title":"limitToFirst"},{"location":"API/Robase/QueryMethods/#limittolast","text":"Robase : limitToLast ( limit : integer ) --> Robase Returns a modified Robase object with its limitToLast query parameter set to the value given. This will return the last {limit} children at the target location. limit: integer The number of results to be returned by the request.","title":"limitToLast"},{"location":"Guide/firebase-setup/","text":"Getting Started Before you can use RobaseService you will first need to create a new Firebase project, this can be done from the Firebase Console . Once you have followed the instructions and started a new project, you will need to open the side-bar menu and go to your \"Realtime Database\" and then \"Create Database\", you will then have a pop-up appear configuring your database and the security rules for it. Finding your Database Url You can find your Database URL by going to the Firebase Console and opening up your Real-time Database. You should be met with a page that looks like this: In the green box is your URL, it should be formatted like so: {database-name}-default-rtdb-{server-location}.firebasedatabase.app/ Info This is the baseUrl parameter of RobaseService.new() . Finding your Database Secret Your database secret will be serving as your authentication token for your requests, this can be created or found by following the image and step-by-step instructions below. When you create your database a database secret should be generated automatically, but you can create more. Caution You must have created your database first, if you have just created your project you will not be able to create a database secret. Read the opening paragraph of this page for help with creating your database. Begin by navigating to your Firebase Console Click on the gear icon next to 'Project Overview' Click 'Service Accounts' in the tabs that appear Click 'Database Secrets' If a secret does not this exist then \"add\" (create) a new one Hover over the secret and reveal it, then copy it and save it somewhere safe. Info The value of your database secret is the token parameter of RobaseService.new() .","title":"Firebase Setup"},{"location":"Guide/firebase-setup/#getting-started","text":"Before you can use RobaseService you will first need to create a new Firebase project, this can be done from the Firebase Console . Once you have followed the instructions and started a new project, you will need to open the side-bar menu and go to your \"Realtime Database\" and then \"Create Database\", you will then have a pop-up appear configuring your database and the security rules for it.","title":"Getting Started"},{"location":"Guide/firebase-setup/#finding-your-database-url","text":"You can find your Database URL by going to the Firebase Console and opening up your Real-time Database. You should be met with a page that looks like this: In the green box is your URL, it should be formatted like so: {database-name}-default-rtdb-{server-location}.firebasedatabase.app/ Info This is the baseUrl parameter of RobaseService.new() .","title":"Finding your Database Url"},{"location":"Guide/firebase-setup/#finding-your-database-secret","text":"Your database secret will be serving as your authentication token for your requests, this can be created or found by following the image and step-by-step instructions below. When you create your database a database secret should be generated automatically, but you can create more. Caution You must have created your database first, if you have just created your project you will not be able to create a database secret. Read the opening paragraph of this page for help with creating your database. Begin by navigating to your Firebase Console Click on the gear icon next to 'Project Overview' Click 'Service Accounts' in the tabs that appear Click 'Database Secrets' If a secret does not this exist then \"add\" (create) a new one Hover over the secret and reveal it, then copy it and save it somewhere safe. Info The value of your database secret is the token parameter of RobaseService.new() .","title":"Finding your Database Secret"},{"location":"Guide/installation/","text":"Installation There are two methods to get up and running with Robase. It is recommended to install RobaseService into ReplicatedStorage or if you have a folder dedicated to packages or opensource modules, then that is even better. You can install it wherever you wish though. Method A: Roblox Model (via Roblox Studio) Caution Roblox Models can be outdated, the suggested installation method is Method B. Todo Write documentation for Roblox Model. Method B: Filesystem (via Rojo) Go to the Github Releases and download the latest stable release of RobaseService. Save it somewhere meaningful so you only need to download it once. Open your working directory in your preferred IDE and unzip the RobaseService zip folder into ReplicatedStorage or wherever you desire. Use Rojo to sync your files into Roblox Studio from your IDE.","title":"Installation"},{"location":"Guide/installation/#installation","text":"There are two methods to get up and running with Robase. It is recommended to install RobaseService into ReplicatedStorage or if you have a folder dedicated to packages or opensource modules, then that is even better. You can install it wherever you wish though.","title":"Installation"},{"location":"Guide/installation/#method-a-roblox-model-via-roblox-studio","text":"Caution Roblox Models can be outdated, the suggested installation method is Method B. Todo Write documentation for Roblox Model.","title":"Method A: Roblox Model (via Roblox Studio)"},{"location":"Guide/installation/#method-b-filesystem-via-rojo","text":"Go to the Github Releases and download the latest stable release of RobaseService. Save it somewhere meaningful so you only need to download it once. Open your working directory in your preferred IDE and unzip the RobaseService zip folder into ReplicatedStorage or wherever you desire. Use Rojo to sync your files into Roblox Studio from your IDE.","title":"Method B: Filesystem (via Rojo)"},{"location":"Guide/robase-setup/","text":"Setting up Robase RobaseService is made to be a replication of DataStoreService so that setup and transferring data are simple to do. Setup Example Code that once looked like this: local DataStoreService = game : GetService ( \"DataStoreService\" ) local ExampleDataStore = DataStoreService : GetDataStore ( \"Example\" ) local ExampleData = ExampleDataStore : GetAsync ( \"123456789\" ) Will now look like this: local RobaseServiceModule = require ( path . to . robase ) local RobaseService = RobaseServiceModule . new ( \"URL\" , \"AUTH\" ) local ExampleRobase = RobaseService : GetRobase ( \"Example\" ) local Success , Result = ExampleRobase : GetAsync ( \"123456789\" ) Every Async method call to a Robase will return a Success and a Result , check the API Reference for more detailed information. Transferring from DataStoreService The following is relevant code to transfer player data from DataStoreService to RobaseService 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 local DataStoreName = \"Enter DataStore Name\" local FirebaseAuthKey = \"Enter Firebase Auth Key\" local FirebaseDBUrl = \"Enter Firebase DB Url\" local RobaseName = \"Enter Robase Name\" local DataStoreService = game : GetService ( \"DataStoreService\" ) local RobaseServiceModule = require ( \"path.to.robase\" ) local RobaseService = RobaseServiceModule . new ( FirebaseDBUrl , FirebaseAuthKey ) local GlobalDataStore = game : GetDataStore ( DataStoreName ) local GlobalRobase = RobaseService : GetRobase ( RobaseName ) game : GetService ( \"Players\" ). PlayerAdded : Connect ( function ( player ) local DS_Key = string.format ( \"%d\" , player . UserId ) -- replace with DataStore key format local RobaseKey = string.format ( \"%d\" , player . UserId ) -- replace with Robase key format for example: string.format(\"Players/%d\", player.UserId) local ExistsInRobase , Result = GlobalRobase : GetAsync ( RobaseKey ) local SavedData = GlobalDataStore : GetAsync ( DS_Key ) or nil if not ExistsInRobase and SavedData then -- Key does not exist in the Firebase and data was found in the DataStore -- so we save it, ExistsInRobase , Result = GlobalRobase : SetAsync ( RobaseKey , SavedData , \"POST\" ) else -- do something else if required end end )","title":"Robase Setup"},{"location":"Guide/robase-setup/#setting-up-robase","text":"RobaseService is made to be a replication of DataStoreService so that setup and transferring data are simple to do.","title":"Setting up Robase"},{"location":"Guide/robase-setup/#setup-example","text":"Code that once looked like this: local DataStoreService = game : GetService ( \"DataStoreService\" ) local ExampleDataStore = DataStoreService : GetDataStore ( \"Example\" ) local ExampleData = ExampleDataStore : GetAsync ( \"123456789\" ) Will now look like this: local RobaseServiceModule = require ( path . to . robase ) local RobaseService = RobaseServiceModule . new ( \"URL\" , \"AUTH\" ) local ExampleRobase = RobaseService : GetRobase ( \"Example\" ) local Success , Result = ExampleRobase : GetAsync ( \"123456789\" ) Every Async method call to a Robase will return a Success and a Result , check the API Reference for more detailed information.","title":"Setup Example"},{"location":"Guide/robase-setup/#transferring-from-datastoreservice","text":"The following is relevant code to transfer player data from DataStoreService to RobaseService 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 local DataStoreName = \"Enter DataStore Name\" local FirebaseAuthKey = \"Enter Firebase Auth Key\" local FirebaseDBUrl = \"Enter Firebase DB Url\" local RobaseName = \"Enter Robase Name\" local DataStoreService = game : GetService ( \"DataStoreService\" ) local RobaseServiceModule = require ( \"path.to.robase\" ) local RobaseService = RobaseServiceModule . new ( FirebaseDBUrl , FirebaseAuthKey ) local GlobalDataStore = game : GetDataStore ( DataStoreName ) local GlobalRobase = RobaseService : GetRobase ( RobaseName ) game : GetService ( \"Players\" ). PlayerAdded : Connect ( function ( player ) local DS_Key = string.format ( \"%d\" , player . UserId ) -- replace with DataStore key format local RobaseKey = string.format ( \"%d\" , player . UserId ) -- replace with Robase key format for example: string.format(\"Players/%d\", player.UserId) local ExistsInRobase , Result = GlobalRobase : GetAsync ( RobaseKey ) local SavedData = GlobalDataStore : GetAsync ( DS_Key ) or nil if not ExistsInRobase and SavedData then -- Key does not exist in the Firebase and data was found in the DataStore -- so we save it, ExistsInRobase , Result = GlobalRobase : SetAsync ( RobaseKey , SavedData , \"POST\" ) else -- do something else if required end end )","title":"Transferring from DataStoreService"},{"location":"Guide/usage/","text":"Usage Guide In the following examples, we will go over and take a look into the Robase Test Database. The structure of which can be seen below. Although it is not an ideal structure, it is just an example of what one could potentially look like. It is solely used to test Robase functionality and nothing more, you should not read into the naming of these keys as they are display only and provide no functional or tangible purpose outside of testing. Important These examples assume you have installed Robase already and have required it with a valid path. Initialising RobaseService To begin using Robase you must first initialise it. This requires two parameters: baseUrl and token . You can go here to learn more about acquiring these and how to safely store them. Danger For security purposes it is highly recommended that you do not store your Database Url and Database Secrets in plain text in your code. Consider using DataStoreService to handle this securely. local ExampleRobaseService = RobaseService . new ( \"https://your-firebase-realtime-database-url\" , --> baseUrl \"YourFirebaseAuthTokenSecret\" --> token ) Getting a Robase You can retrieve a Robase object several ways at any level in your database. You can do this using the : GetRobase () method of RobaseService. This method has no required parameters - so you can access top-level elements in your database without creating new Robase objects for them - though, it is recommended to provide a name and create individual Robase objects for each top-level element you wish to work on, purely for readability-sake. name The name of the element in your database that you wish to point the Robase to. scope The location in your database you wish to search for name . Internally the scope goes before name in the Url, and would be constructed like so: https://{database-url}/{scope}/{name} The scope and name inputs are formatted like a directory so they use a \"/\" to separate keys. We will cover using both of these and neither of these in the following sections. Caution Do not prefix or suffix your name, keys, or scopes with \"/\", RobaseService will do this for you. Providing a name without scope This is simply put going to search the top-level of your database for the provided name, in our example, we have \"PlayerData\", so let's set up our Robase there. local ExampleRobase = RobaseService : GetRobase ( \"PlayerData\" ) Info The URL for this would look like this: https://{database-url}/PlayerData.json?auth={token} Providing a name and a scope But, what if we want to access a deeper element in our database, and set up a Robase at that point? Well, we can, and it's very simple! Just provide a scope with the name! So for this example, we will access the \"Players\" array within \"BatchUpdateMe\". local ExampleRobase = RobaseService : GetRobase ( \"Players\" , --> \"Name\" of the key to search for \"PlayerData/GetDataHere/BatchUpdateMe\" --> \"Scope\" of where to search for \"Name\" ) Info The URL for this would look like this: https://{database-url}/{PlayerData/GetDataHere/BatchUpdateMe}/{Players}.json?auth={token} Providing no information This method is used solely to grab the entire database, top-level keys and all! This allows us to perform :GetAsync() requests into any top-level key and get the table or data located at that point, like so: local ExampleRobase = RobaseService : GetRobase () Info The URL for this would look like this: https://{database-url}/ With subsequent method calls on the Robase adding the key at the end of the Url, followed by the json specifier and auth token key-value. It's that simple. So now you have your Robase, what next? Getting Data One of the fundamental parts of your game will be saving and loading player data. To start, we will be acquiring some data from the database, for this case, we will create a Robase at \"PlayerData\" and acquire the data located at \"GetDataHere\". local ExampleRobase = RobaseService : GetRobase ( \"PlayerData\" ) local Success , ExampleData = ExampleRobase : GetAsync ( \"GetDataHere\" ) print ( ExampleData ) The above code will print out the table located at \"GetDataHere\". Saving data There are a few saving options in Robase, these are quite similar to DataStoreService: SetAsync will create new data or replace old data at the given key using a PUT request if no method is provided. UpdateAsync will modify the data at the given key using a PATCH request. BatchUpdateAsync will modify a set of keys using a PATCH request. The decision to use PUT over POST requests by default was an easy one to make - it's idempotent, meaning successive calls will always provide the same response and will have zero side effects. Using SetAsync First, we will cover the basic SetAsync method. This time around, we will create a Robase at \"GetDataHere\" using the scope parameter to look in \"PlayerData\". local ExampleRobase = RobaseService : GetRobase ( \"GetDataHere\" , \"PlayerData\" ) local NewData = { Admin = false } ExampleRobase : SetAsync ( \"ExtraConfig\" , NewData ) -- The above is equivalent to the following: local Success , Result = ExampleRobase : SetAsync ( \"ExtraConfig\" , NewData ) local Success , Result = ExampleRobase : SetAsync ( \"ExtraConfig\" , NewData , \"PUT\" ) ExampleRobase : SetAsync ( \"ExtraConfig\" , NewData , \"PUT\" ) This example first creates a Robase at \"GetDataHere\" and then creates a new table with a single field: Admin , which is set to false . We then tell the Robase that we wish to PUT that new field inside a new table inside the database at the key \"ExtraConfig\". We can do this in several different ways, as shown. A PUT request will simply check to see if the data already exists at the given key - and replace it if it does - or it will create a new key and add the data we supplied as it's value, in this case a table with a single field of Admin . Updating your data In most cases though, you will want to opt for updating your data instead, in this case, we use UpdateAsync . This method has one key difference from the DataStoreService equivalent : the cache parameter. Robase was made with caches in mind such that you will use fewer requests and can take advantage of the powerful BatchUpdateAsync method. You can extend upon this feature nicely by writing a custom data handler module and having your saving/updating use Write-through - change the database first, and then the cache. Though, we will not be showcasing this functionality here. Caution Currently, neither of these methods support retries and this functionality will have to be written at the call site of these methods. Using UpdateAsync For this example, we will create a Robase at \"PlayerData\" and we will be updating the \"GetDataHere\" key. local ExampleRobase = RobaseService : GetRobase ( \"PlayerData\" ) local NewData = { [ \"UpdateWhatever\" ] = \"How are?!\" } ExampleRobase : UpdateAsync ( \"GetDataHere\" , function ( oldData ) return NewData end ) -- Again, the above is also equivalent to: local Success , Result = ExampleRobase : UpdateAsync ( \"GetDataHere\" , function ( oldData ) return NewData end ) Caution You can only update or modify keys that are a table, you cannot send a request directly to \"UpdateWhatever\", this will fail. Using BatchUpdateAsync This is where things get a teeny bit more complicated, for this method you must define your callback methods and populate a table with them. This time, we will modify the data located at \"BatchUpdateMe\" within \"GetDataHere\". local ExampleRobase = RobaseService : GetRobase ( \"GetDataHere\" , \"PlayerData\" ) local NewData = { Players = { [ \"789\" ] = { Coins = 123456789 , Level = 99 } }, Server = { LastUpdated = os.date () } } local Updaters = { Players = function ( oldData ) return NewData . Players end , Server = function ( oldData ) return NewData . Server end } ExampleRobase : BatchUpdateAsync ( \"BatchUpdateMe\" , Updaters ) -- Equivalent to: local Success , Result = ExampleRobase : BatchUpdateAsync ( \"BatchUpdateMe\" , Updaters ) Incrementing Data Just like DataStoreService, RobaseService offers an IncrementAsync function which works similarly to the aforementioned DataStoreService method. Caution Attempting to increment data that is not an integer will throw an error. Numbers and any other data type are not acceptable types to increment. Again, we will be creating our Robase at \"GetDataHere\", but this time we will perform two basic operations on the \"IncrementThat\" key. local ExampleRobase = RobaseService : GetRobase ( \"GetDataHere\" , \"PlayerData\" ) local Success , Result = ExampleRobase : IncrementAsync ( \"IncrementThat\" ) print ( Result ) -->> 51 Success , Result = ExampleRobase : IncrementAsync ( \"IncrementThat\" , 24 ) print ( Result ) -->> 75 Deleting Data For whatever reason, you have decided to completely wipe some data from your database, why you would want to do this is your own reason, but this method exists, so let's demonstrate it: local ExampleRobase = RobaseService : GetRobase ( \"GetDataHere\" , \"PlayerData\" ) local Success , Result = ExampleRobase : DeleteAsync ( \"IPutThisHereRemotely\" ) print ( Result ) -->> true The result returned from DeleteAsync will give you the previously stored data, this is useful for if you've made an oopsie and want to fix it. I'd rather not keep this data deleted, so I'm going to put it back: Success , Result = ExampleRobase : SetAsync ( \"IPutThisHereRemotely\" , Result ) print ( Result ) -->> true The main use-case that I can think of for wanting to properly use this, ever, is if you provide clients with the option to delete their data from the database.","title":"Usage Guide"},{"location":"Guide/usage/#usage-guide","text":"In the following examples, we will go over and take a look into the Robase Test Database. The structure of which can be seen below. Although it is not an ideal structure, it is just an example of what one could potentially look like. It is solely used to test Robase functionality and nothing more, you should not read into the naming of these keys as they are display only and provide no functional or tangible purpose outside of testing. Important These examples assume you have installed Robase already and have required it with a valid path.","title":"Usage Guide"},{"location":"Guide/usage/#initialising-robaseservice","text":"To begin using Robase you must first initialise it. This requires two parameters: baseUrl and token . You can go here to learn more about acquiring these and how to safely store them. Danger For security purposes it is highly recommended that you do not store your Database Url and Database Secrets in plain text in your code. Consider using DataStoreService to handle this securely. local ExampleRobaseService = RobaseService . new ( \"https://your-firebase-realtime-database-url\" , --> baseUrl \"YourFirebaseAuthTokenSecret\" --> token )","title":"Initialising RobaseService"},{"location":"Guide/usage/#getting-a-robase","text":"You can retrieve a Robase object several ways at any level in your database. You can do this using the : GetRobase () method of RobaseService. This method has no required parameters - so you can access top-level elements in your database without creating new Robase objects for them - though, it is recommended to provide a name and create individual Robase objects for each top-level element you wish to work on, purely for readability-sake. name The name of the element in your database that you wish to point the Robase to. scope The location in your database you wish to search for name . Internally the scope goes before name in the Url, and would be constructed like so: https://{database-url}/{scope}/{name} The scope and name inputs are formatted like a directory so they use a \"/\" to separate keys. We will cover using both of these and neither of these in the following sections. Caution Do not prefix or suffix your name, keys, or scopes with \"/\", RobaseService will do this for you.","title":"Getting a Robase"},{"location":"Guide/usage/#providing-a-name-without-scope","text":"This is simply put going to search the top-level of your database for the provided name, in our example, we have \"PlayerData\", so let's set up our Robase there. local ExampleRobase = RobaseService : GetRobase ( \"PlayerData\" ) Info The URL for this would look like this: https://{database-url}/PlayerData.json?auth={token}","title":"Providing a name without scope"},{"location":"Guide/usage/#providing-a-name-and-a-scope","text":"But, what if we want to access a deeper element in our database, and set up a Robase at that point? Well, we can, and it's very simple! Just provide a scope with the name! So for this example, we will access the \"Players\" array within \"BatchUpdateMe\". local ExampleRobase = RobaseService : GetRobase ( \"Players\" , --> \"Name\" of the key to search for \"PlayerData/GetDataHere/BatchUpdateMe\" --> \"Scope\" of where to search for \"Name\" ) Info The URL for this would look like this: https://{database-url}/{PlayerData/GetDataHere/BatchUpdateMe}/{Players}.json?auth={token}","title":"Providing a name and a scope"},{"location":"Guide/usage/#providing-no-information","text":"This method is used solely to grab the entire database, top-level keys and all! This allows us to perform :GetAsync() requests into any top-level key and get the table or data located at that point, like so: local ExampleRobase = RobaseService : GetRobase () Info The URL for this would look like this: https://{database-url}/ With subsequent method calls on the Robase adding the key at the end of the Url, followed by the json specifier and auth token key-value. It's that simple. So now you have your Robase, what next?","title":"Providing no information"},{"location":"Guide/usage/#getting-data","text":"One of the fundamental parts of your game will be saving and loading player data. To start, we will be acquiring some data from the database, for this case, we will create a Robase at \"PlayerData\" and acquire the data located at \"GetDataHere\". local ExampleRobase = RobaseService : GetRobase ( \"PlayerData\" ) local Success , ExampleData = ExampleRobase : GetAsync ( \"GetDataHere\" ) print ( ExampleData ) The above code will print out the table located at \"GetDataHere\".","title":"Getting Data"},{"location":"Guide/usage/#saving-data","text":"There are a few saving options in Robase, these are quite similar to DataStoreService: SetAsync will create new data or replace old data at the given key using a PUT request if no method is provided. UpdateAsync will modify the data at the given key using a PATCH request. BatchUpdateAsync will modify a set of keys using a PATCH request. The decision to use PUT over POST requests by default was an easy one to make - it's idempotent, meaning successive calls will always provide the same response and will have zero side effects.","title":"Saving data"},{"location":"Guide/usage/#using-setasync","text":"First, we will cover the basic SetAsync method. This time around, we will create a Robase at \"GetDataHere\" using the scope parameter to look in \"PlayerData\". local ExampleRobase = RobaseService : GetRobase ( \"GetDataHere\" , \"PlayerData\" ) local NewData = { Admin = false } ExampleRobase : SetAsync ( \"ExtraConfig\" , NewData ) -- The above is equivalent to the following: local Success , Result = ExampleRobase : SetAsync ( \"ExtraConfig\" , NewData ) local Success , Result = ExampleRobase : SetAsync ( \"ExtraConfig\" , NewData , \"PUT\" ) ExampleRobase : SetAsync ( \"ExtraConfig\" , NewData , \"PUT\" ) This example first creates a Robase at \"GetDataHere\" and then creates a new table with a single field: Admin , which is set to false . We then tell the Robase that we wish to PUT that new field inside a new table inside the database at the key \"ExtraConfig\". We can do this in several different ways, as shown. A PUT request will simply check to see if the data already exists at the given key - and replace it if it does - or it will create a new key and add the data we supplied as it's value, in this case a table with a single field of Admin .","title":"Using SetAsync"},{"location":"Guide/usage/#updating-your-data","text":"In most cases though, you will want to opt for updating your data instead, in this case, we use UpdateAsync . This method has one key difference from the DataStoreService equivalent : the cache parameter. Robase was made with caches in mind such that you will use fewer requests and can take advantage of the powerful BatchUpdateAsync method. You can extend upon this feature nicely by writing a custom data handler module and having your saving/updating use Write-through - change the database first, and then the cache. Though, we will not be showcasing this functionality here. Caution Currently, neither of these methods support retries and this functionality will have to be written at the call site of these methods.","title":"Updating your data"},{"location":"Guide/usage/#using-updateasync","text":"For this example, we will create a Robase at \"PlayerData\" and we will be updating the \"GetDataHere\" key. local ExampleRobase = RobaseService : GetRobase ( \"PlayerData\" ) local NewData = { [ \"UpdateWhatever\" ] = \"How are?!\" } ExampleRobase : UpdateAsync ( \"GetDataHere\" , function ( oldData ) return NewData end ) -- Again, the above is also equivalent to: local Success , Result = ExampleRobase : UpdateAsync ( \"GetDataHere\" , function ( oldData ) return NewData end ) Caution You can only update or modify keys that are a table, you cannot send a request directly to \"UpdateWhatever\", this will fail.","title":"Using UpdateAsync"},{"location":"Guide/usage/#using-batchupdateasync","text":"This is where things get a teeny bit more complicated, for this method you must define your callback methods and populate a table with them. This time, we will modify the data located at \"BatchUpdateMe\" within \"GetDataHere\". local ExampleRobase = RobaseService : GetRobase ( \"GetDataHere\" , \"PlayerData\" ) local NewData = { Players = { [ \"789\" ] = { Coins = 123456789 , Level = 99 } }, Server = { LastUpdated = os.date () } } local Updaters = { Players = function ( oldData ) return NewData . Players end , Server = function ( oldData ) return NewData . Server end } ExampleRobase : BatchUpdateAsync ( \"BatchUpdateMe\" , Updaters ) -- Equivalent to: local Success , Result = ExampleRobase : BatchUpdateAsync ( \"BatchUpdateMe\" , Updaters )","title":"Using BatchUpdateAsync"},{"location":"Guide/usage/#incrementing-data","text":"Just like DataStoreService, RobaseService offers an IncrementAsync function which works similarly to the aforementioned DataStoreService method. Caution Attempting to increment data that is not an integer will throw an error. Numbers and any other data type are not acceptable types to increment. Again, we will be creating our Robase at \"GetDataHere\", but this time we will perform two basic operations on the \"IncrementThat\" key. local ExampleRobase = RobaseService : GetRobase ( \"GetDataHere\" , \"PlayerData\" ) local Success , Result = ExampleRobase : IncrementAsync ( \"IncrementThat\" ) print ( Result ) -->> 51 Success , Result = ExampleRobase : IncrementAsync ( \"IncrementThat\" , 24 ) print ( Result ) -->> 75","title":"Incrementing Data"},{"location":"Guide/usage/#deleting-data","text":"For whatever reason, you have decided to completely wipe some data from your database, why you would want to do this is your own reason, but this method exists, so let's demonstrate it: local ExampleRobase = RobaseService : GetRobase ( \"GetDataHere\" , \"PlayerData\" ) local Success , Result = ExampleRobase : DeleteAsync ( \"IPutThisHereRemotely\" ) print ( Result ) -->> true The result returned from DeleteAsync will give you the previously stored data, this is useful for if you've made an oopsie and want to fix it. I'd rather not keep this data deleted, so I'm going to put it back: Success , Result = ExampleRobase : SetAsync ( \"IPutThisHereRemotely\" , Result ) print ( Result ) -->> true The main use-case that I can think of for wanting to properly use this, ever, is if you provide clients with the option to delete their data from the database.","title":"Deleting Data"}]}